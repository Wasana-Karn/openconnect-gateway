#!/bin/bash
### BEGIN INIT INFO
# Provides:          vpn-gateway
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: VPN Gateway
# Description:       Start the VPN Gateway
#  Basic script to open VPN tunnel and create route for entire VPC
### END INIT INFO
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

CONTAINER_ID="/var/run/vpn-gateway-docker-container"
INFO="

Usage: $(basename "$0") (start|stop|state|restart|force-reload)

"
source /lib/lsb/init-functions
CONF_FILE=/etc/vpn-gateway.conf
VPN_USER=""
VPN_PASS=""
VPN_IMAGE=$(awk '/^docker-image/{print $2}' $CONF_FILE)
if [ -z "$VPN_IMAGE" ]; then
  VPN_IMAGE="vpn-gateway"
fi

function check_status(){
  if [ -f "$CONTAINER_ID" ] && [ -n "$(docker ps -q --no-trunc --filter id=$(cat $CONTAINER_ID))" ]
  then
    docker exec $(cat $CONTAINER_ID) bash -c '/etc/init.d/vpn-tunnel status' > /dev/null
    return $?
  else
    return 1
  fi
}


function state_vpn(){
  if check_status; then
    docker ps --filter id=$(cat $CONTAINER_ID) \
           --format "ContainerID: {{.ID}} \nImage: {{.Image}} \nStatus: {{ .Status }}"
  else
    echo "VPN gateway is stopped."
    exit 3
  fi
}


function start_vpn(){
  if check_status; then
    log_warning_msg "VPN gateway is already running."
    exit 1
  elif [ -f "$CONTAINER_ID" ]; then
    log_failure_msg "VPN gateway has departed."
    log_failure_msg "Check the log with 'docker logs $(cat $CONTAINER_ID | head -c 12)' and restart."
    exit 2
  else
    echo "Starting..."
    if [ -z "$(docker images $VPN_IMAGE -q)" ]; then
      echo "Pulling docker image: $VPN_IMAGE"
      docker pull $VPN_IMAGE
    fi
    VPC_CIDR=$(awk '/^vpc-cidr/{print $2}' $CONF_FILE)
    VPN_HOST=$(awk '/^hostname/{print $2}' $CONF_FILE)
    VPN_USER=$(awk '/^username/{print $2}' $CONF_FILE)
    VPN_PASS=$(awk '/^password/{print $2}' $CONF_FILE)
    VPN_TUNN=$(awk '/^tunnel/{print $2}' $CONF_FILE)
    VPN_INT=$(awk '/^interface/{print $2}' $CONF_FILE)
    docker run --net=host --privileged -d -v $(dirname $(readlink -f /etc/resolv.conf)):/etc-host \
           -e VPC_CIDR="${VPC_CIDR}" -e VPN_HOST="${VPN_HOST}" \
           -e VPN_USER="${VPN_USER}" -e VPN_PASS="${VPN_PASS}" \
           -e VPN_TUNN="${VPN_TUNN}" -e VPN_INT="${VPN_INT}" \
           $VPN_IMAGE vpn-runner.sh > $CONTAINER_ID
    let "attempt=30"
    check_status
    while [ "$?" = "3" ]; do
      let "attempt -= 1"
      printf "$attempt.."
      if [ "$attempt" = "0" ]; then
        echo ""
        log_failure_msg "Failed starting VPN gateway."
        kill_vpn
        exit 2
      fi
      sleep 1
      check_status
    done
    echo ""
    log_success_msg "Started docker container: $(cat $CONTAINER_ID | head -c 12)"
  fi
}

function stop_vpn(){

  if [ -f "$CONTAINER_ID" ]; then
    docker stop $(cat $CONTAINER_ID) > /dev/null
    log_success_msg "Stopped docker container: $(cat $CONTAINER_ID | head -c 12)"
    rm -f $CONTAINER_ID
  else
    log_warning_msg "VPN gateway is not running."
  fi
}

function kill_vpn(){

  if [ -f "$CONTAINER_ID" ]; then
    docker stop $(cat $CONTAINER_ID) > /dev/null
    log_success_msg "Killed docker container: $(cat $CONTAINER_ID | head -c 12)"
    rm -f $CONTAINER_ID
  else
    log_warning_msg "VPN gateway is not running."
  fi
}


case "$1" in

  "start")
    
    start_vpn
    ;;
  
  "stop")
    
    stop_vpn
    ;;
  
  "state")
    
    state_vpn
    ;;
  
  "status")
    
    state_vpn
    ;;
  
  "restart")
    
    stop_vpn
    start_vpn
    ;;
  
  "force-reload")
    
    kill_vpn
    start_vpn
    ;;
  
  *)
    
    echo "$INFO"
    exit 0
    ;;
esac
