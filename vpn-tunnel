#!/bin/bash
RESOLV_FILE="/etc/resolv.conf"
HOST_RESOLV_FILE=""
PIDFILE="/var/run/openconnect.pid"
TEMP_LOG=$(mktemp "/tmp/vpn-tunnel-XXXXXX.txt")
INFO="

Usage: $(basename "$0") (start|stop|kill|status|restart) [/path/to/vpn-credentials.sh]

Credentials for VPN should be supplied through environment variables VPN_HOST,
VPN_USER and VPN_PASS, otherwise starting VPN will fail.

"
test -z "${VPN_TUNN}" && VPN_TUNN="tun0"
test -z "${INTERFACE}" && INTERFACE="eth0"
VPN_MODE="gateway"

# Make sure we have credentials available.
if [ "$1" = "start" ] || [ "$1" = "restart" ]; then
  if [ -z "${VPN_HOST}" ]; then
    echo "Missing VPN hostname." >&2
    exit 2
  fi
  if [ -z "${VPN_USER}" ] || [ -z "${VPN_PASS}" ]; then
    echo "Missing vpn credentials." >&2
    exit 2
  fi
fi
if [ "$1" = "start" ] && [ -z "${VPC_CIDR}" ]; then
  VPN_MODE="client"
  echo "VPC CIDR is missing, routing setup will be skipped. Working as a VPN client only."
fi
# In case we are running inside docker container we need to update host's
# resolv.conf as well.
if [ -f /.dockerenv ]; then
  HOST_RESOLV_FILE="/etc-host/resolv.conf"
fi


function flush_iptables(){
  if [ "${VPN_MODE}" = "gateway" ]; then
    # Flush all the rules in IPfilter and NAT tables
    /sbin/iptables --flush
    /sbin/iptables --delete-chain
    /sbin/iptables --table nat --flush
    /sbin/iptables --table nat --delete-chain
    /sbin/iptables --table mangle --flush
    /sbin/iptables --table mangle --delete-chain
  fi
}

# Establish routing rules to set up VPN/NAT tunnel
function exec_iptables(){
  if [ "${VPN_MODE}" = "gateway" ]; then

    flush_iptables

    # Setup postrouting rules
    /sbin/iptables -A POSTROUTING -t nat -o $VPN_TUNN -j MASQUERADE
    /sbin/iptables -A POSTROUTING -t nat -s $VPC_CIDR -o $INTERFACE -j MASQUERADE

    ### ALLOW - VPC CIDR
    /sbin/iptables -A INPUT -p all -s $VPC_CIDR -j ACCEPT
  fi
}

# Cleanup after killing the connection and restore original config.
function cleanup_vpn(){

  rm -f $PIDFILE >/dev/null 2>&1
  if [ -n "$HOST_RESOLV_FILE" ]; then
    cp $HOST_RESOLV_FILE.backup $HOST_RESOLV_FILE
    echo "Restored original $RESOLV_FILE."
  fi
  flush_iptables
}


# Connect to Cisco SSL VPN using passwords from stdin (passed by VPN_PASS variable created prior)
function connect_vpn(){

  if [ -f $PIDFILE ]; then
    echo "Openconnect is already running"
    exit 1
  else
    if [ -n "$HOST_RESOLV_FILE" ]; then
      cp $RESOLV_FILE $HOST_RESOLV_FILE.backup
      echo "Backed up $RESOLV_FILE."
    fi        
    echo "${VPN_PASS}" | openconnect --pid-file=$PIDFILE -i $VPN_TUNN -b -s '/usr/share/vpnc-scripts/vpnc-script' --user="${VPN_USER}" --passwd-on-stdin ${VPN_HOST} > $TEMP_LOG 2>&1
    if [ -n "$HOST_RESOLV_FILE" ]; then
      cp $RESOLV_FILE $HOST_RESOLV_FILE
    fi
    if ! grep -i "Got CONNECT response: HTTP/1.1 200 OK" $TEMP_LOG
    then
      echo "Openconnect failed to start." >&2
      cat $TEMP_LOG
      cleanup_vpn
      exit 3
    else
      echo "Openconnect started."
      exec_iptables
      echo "Routing started."
    fi
  fi
}

# Check if openconnect is running through PIDFILE
function check_openconnect(){
  if [ -f $PIDFILE ]; then
    echo "Openconnect is running."
  else
    echo "Openconnect is stopped."
    exit 3
  fi
}

# Confirm if PIDFILE exists, then stop it gracefully.
function stop_openconnect(){

  if [ -f $PIDFILE ]; then
    PID=$(cat $PIDFILE)
    # send SIGINT to openconnect and wait for it to finish.
    kill -2 $PID
    printf "Stopping openconnect."
    while [ -e /proc/$PID ]; do sleep 0.1; printf "." ; done
    printf "\nOpenconnect stopped.\n"
    cleanup_vpn
  else
    echo "Openconnect is not running."
  fi
}

# Confirm if PIDFILE exists, then kill it immediately
function kill_openconnect(){

  if [ -f $PIDFILE ]; then
    kill -9 $(cat $PIDFILE)
    echo "Openconnect killed."
    cleanup_vpn
  else
    echo "Openconnect is not running."
  fi
}

case "$1" in

  "start")
    
    connect_vpn
    ;;
  
  "stop")
    
    stop_openconnect
    ;;
  
  "kill")
    
    kill_openconnect
    ;;
  
  "status")
    
    check_openconnect
    ;;
  
  "restart")
    
    $0 stop
    $0 start
    ;;
  
  *)
    
    echo "$INFO"
    exit 0
    ;;
esac
